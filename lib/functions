#!/usr/bin/env bash
#
# Define useful aliases and functions and prepare the directory structure.
# Do NOT source outside of a script!

# No set-e because it's a sourced file

pushd "$(pwd)" > /dev/null

# Generate a new Drucker config file if not present
if [ ! -f "../../drucker.config" ]; then
    echo "No drucker.config file found. Let's generate a new one:"
    ./gen-config.sh
fi

DRUCKER_DIR="$(dirname $(pwd))"              # druckerdir: father of this folder
PROJECT_DIR="$(dirname "${DRUCKER_DIR}")"    # projectdir: grand-father of this folder
PROJECT_REAL="$(realpath "${PROJECT_DIR}")"    # projectdir: grand-father of this folder

# Load the environment without creating the docker environment file
source ./environment > /dev/null
# Create the environment file for docker and docker-compose
env -i ./environment | grep -v "_=" | sort > .docker.env

popd > /dev/null

# @function projectdir
#           returns the path of the project dir
function projectdir ()
{
    echo "${PROJECT_DIR}"
}
# @function druckerdir
#           returns the path of the drucker dir
function druckerdir ()
{
    echo "${DRUCKER_DIR}"
}
# @function wwwdir
#           returns the path of the www dir
function wwwdir ()
{
    echo "$(projectdir)/www" # see also "mkdir" at the end of this file
}
# @function web_wwwdir
#           returns the path of the www dir in the web container
function web_wwwdir ()
{
    echo "/var/www/html"
}
# @function docroot
#           returns the path of the document root
function docroot ()
{
    echo "$(projectdir)/www/web" # see also "mkdir" at the end of this file
}
# @function web_docroot
#           returns the path of the document root in the web container
function web_docroot()
{
    echo "/var/www/html/web"
}
# @function tmp
#           returns the path of the tmp dir
function tmp ()
{
    echo "$(projectdir)/www/tmp" # see also "mkdir" at the end of this file
}
# @function web_tmp
#           returns the path of the tmp dir in the web container
function web_tmp()
{
    echo "/var/www/html/tmp"
}
# @function path_relative_to_projectdir
#           returns the path of the current pwd relative to the project dir
function path_relative_to_projectdir()
{
    realpath --relative-to="$(projectdir)" "$(pwd)"
}

# @function check_project_dir
#           Checks if launched command is inside the current project dir
function check_project_dir ()
{
    if case "$(pwd)" in "${PROJECT_DIR}"*) false;; *) true;; esac; then
        echo -e "\033[1;33m[WARNING]\033[0m You're not inside the project dir where you've loaded the env."
        echo -en "\033[1;33m[WARNING]\033[0m Changing directory to ${PROJECT_DIR} in 5 seconds ([ctrl-c] to cancel)... "
        sleep 5
        cd "${PROJECT_DIR}"
        echo "Done."
    fi
}

# @function docker_images_build
#           Builds all images
function docker_images_build() {
    echo "Building docker-compose images..."
    "${DRUCKER_DIR}"/lib/docker-compose-utils.sh action="build"
    echo "Building custom images..."
    docker build --no-cache -t "${NODE_IMAGE}" "${NODE_CONTEXT}"
}

# @function tty_option
#           returns --tty if interactive
# @usage    tty_option
function tty_option() {
    if (tty -s) ; then
        echo --tty;
    fi
}

# @function _php
#           calls php container
# @usage    _php [commands...]
function _php()
{
    check_project_dir

    # Check if docker-compose is running
    dcrunning=`(docker-compose \
        --project-name "$PROJECT_NAME_PLAIN" \
        -f "$(druckerdir)/lib/docker-compose.yml" \
        exec -T $PHP_SERVICE echo 1 2>/dev/null) || echo 0`

    dcrunning="$(echo -e "${dcrunning}" | tr -d '[:space:]')"

    # @TOFIX: without no-tty allocation (-T), the result code is "129", instead of real errcode.
    # so, we need to disable set -e in all scripts, temporary...

    if [ "${dcrunning}" == "1" ]; then
        docker-compose \
            --project-name "$PROJECT_NAME_PLAIN" \
            -f "$(druckerdir)/lib/docker-compose.yml" \
            exec -T \
            -u "${WWW_USER}"  \
            $PHP_SERVICE "${@}"
    else
        docker-compose \
            --project-name "$PROJECT_NAME_PLAIN" \
            -f "$(druckerdir)/lib/docker-compose.yml" \
            run -T \
            --name="${PROJECT_NAME_PLAIN}_tmp_php_$(date +%H%M%S)" \
            -u "${WWW_USER}" \
            --rm \
            --workdir="$(web_docroot)" \
            $PHP_SERVICE "${@}"
    fi
}

# @function php
#           calls a shell in the php container or a php command
# @usage    php [php-commands...]
function php()
{
    if [ -e "${@}" ]; then
        _php sh
    else
        _php php "${@}"
    fi
}
# @function phproot
#           executes a shell command in the php container as root user
# @usage    phproot shell-command
function phproot()
{
    web_user=$WWW_USER
    WWW_USER=0
    _php sh -c "${@}"
    WWW_USER=$web_user
}

# @function drush
#           calls dockerized drush for the current project. It uses the docroot as
#           working directory.
# @usage    drush drush-commands...
function drush()
{
    _php drush -r "$(web_docroot)" "${@}"
}

# @function drupal
#           calls docerized drupal console for the current project. It uses the docroot as
#           working directory.
# @usage    drupal drupal-console-commands...
function drupal()
{
    _php /var/www/html/vendor/bin/drupal --root="$(web_docroot)" "${@}"
}

# @function composer
#           calls docerized composer for the current project. It uses the docroot as
#           working directory.
# @usage    composer composer-commands...
function composer()
{
    _php composer --working-dir="$(web_wwwdir)" "${@}"
}

# @function phpunit
#           calls docerized phpunit for the current project. It uses the docroot as
#           working directory.
# @usage    composer composer-commands...
function phpunit()
{
    _php /var/www/html/vendor/bin/phpunit  "${@}"
}

# @function node_ports
#           returns node ports to map
# @usage    node_ports
function node_ports() {
    if [ ! -z "${NODE_BROWSERSYNC_PORT}" ]; then
        echo "-p ${NODE_BROWSERSYNC_PORT}:3050";
    fi
}

function node()
{
    docker run \
        --interactive \
        $(tty_option) \
        --rm \
        $(node_ports) \
        --volume="$(projectdir)":/usr/src/app \
        --workdir="/usr/src/app/$(path_relative_to_projectdir)" \
        --user="${WWW_USER}:${WWW_USER_GROUP}" \
        --name="${PROJECT_NAME_PLAIN}_tmp_node_$(date +%H%M%S)" \
        ${NODE_IMAGE} \
        \
        node "${@}"
}

function npm()
{
    docker run \
        --interactive \
        $(tty_option) \
        --rm \
        $(node_ports) \
        --volume="$(projectdir)":/usr/src/app \
        --workdir="/usr/src/app/$(path_relative_to_projectdir)" \
        --user="${WWW_USER}:${WWW_USER_GROUP}" \
        --name="${PROJECT_NAME_PLAIN}_tmp_npm_$(date +%H%M%S)" \
        ${NODE_IMAGE} \
        \
        npm "${@}"
}

function yarn()
{
    docker run \
        --interactive \
        $(tty_option) \
        --rm \
        $(node_ports) \
        --volume="$(projectdir)":/usr/src/app \
        --workdir="/usr/src/app/$(path_relative_to_projectdir)" \
        --user="${WWW_USER}:${WWW_USER_GROUP}" \
        --name="${PROJECT_NAME_PLAIN}_tmp_yarn_$(date +%H%M%S)" \
        ${NODE_IMAGE} \
        \
        yarn "${@}"
}

function gulp()
{
    docker run \
        --interactive \
        $(tty_option) \
        --rm \
        $(node_ports) \
        --volume="$(projectdir)":/usr/src/app \
        --workdir="/usr/src/app/$(path_relative_to_projectdir)" \
        --user="${WWW_USER}:${WWW_USER_GROUP}" \
        --name="${PROJECT_NAME_PLAIN}_tmp_gulp_$(date +%H%M%S)" \
        ${NODE_IMAGE} \
        \
        gulp "${@}"
}

function drucker()
{

    check_project_dir

    case "${@}" in
    "init")
        "${DRUCKER_DIR}"/lib/init.sh
        ;;
    "install")
        "${DRUCKER_DIR}"/lib/install.sh
        ;;
    "start")
        "${DRUCKER_DIR}"/lib/docker-compose-utils.sh action="start" -d
        ;;
    "stop")
        "${DRUCKER_DIR}"/lib/docker-compose-utils.sh action="stop"
        ;;
    "restart")
        "${DRUCKER_DIR}"/lib/docker-compose-utils.sh action="stop"
        "${DRUCKER_DIR}"/lib/docker-compose-utils.sh action="start" -d
        ;;
    "logs")
        "${DRUCKER_DIR}"/lib/docker-compose-utils.sh action="logs"
        ;;
    "dblog")
        drush watchdog-show --count=20 --extended    # Drush8: --tail --sleep-delay=2
        ;;
    "gen-config")
        "${DRUCKER_DIR}"/lib/gen-config.sh
        ;;
    "backup")
        echo "You can use:"
        echo "  - drush archive-dump  : For a full backup (files and database)"
        echo "  - drucker sql-backup  : For a backup of the database only"
        ;;
    "restore")
        echo "You can use:"
        echo "  - drush archive-restore --overwrite /home/www-data/drush-backups/archive-dump/path/to/backup  : To restore a full backup (files and database)"
        echo "  - drucker sql-restore : To restore a backup of the database only"
        ;;
    "sql-backup-restore")
        "${DRUCKER_DIR}"/lib/sql-backup-restore.sh
        ;;
    "sql-backup")
        "${DRUCKER_DIR}"/lib/sql-backup-restore.sh --backup -y
        ;;
    "sql-restore")
        "${DRUCKER_DIR}"/lib/sql-backup-restore.sh --restore -y
        ;;
    "sql-sanitize")
        "${DRUCKER_DIR}"/lib/sql-backup-restore.sh --sanitize -y
        ;;
    "docker-images-build")          # Hidden feature
        docker_images_build
        ;;
    *)
        fhelp
    esac
}

function fhelp()
{
    printf "\

################################################################################
 Welcome to your project \e[1m${PROJECT_NAME}\e[0m, powered by \e[1;34m\e[1mDrucker\e[0m!
--------------------------------------------------------------------------------
 You can now use the command \e[1mdrucker\e[0m to manipulate the project:
   - \e[1mdrucker init\e[0m                : Perform a fresh install of Drupal
   - \e[1mdrucker install\e[0m             : Launch the installation of all dependencies
   - \e[1mdrucker start\e[0m               : Launch the stack
   - \e[1mdrucker stop\e[0m                : Stop the stack
   - \e[1mdrucker logs\e[0m                : Show all the logs in real time
   - \e[1mdrucker dblog\e[0m               : Show all the DB log (from Drupal) in real time
   - \e[1mdrucker gen-config\e[0m          : Generate a new Drucker config file
   - \e[1mdrucker backup\e[0m              : Create a backup of the whole site (db and files)
   - \e[1mdrucker restore\e[0m             : Restore the whole site (db and files)
   - \e[1mdrucker sql-backup-restore\e[0m  : Create a backup and a restore of a database
   - \e[1mdrucker sql-backup\e[0m          : Create a backup of a database
   - \e[1mdrucker sql-restore\e[0m         : Restore a database
   - \e[1mdrucker sql-sanitize\e[0m        : Sanitize the current database

 You can use following commands to call dockerized utilities:
   - \e[1mphp\e[0m       : to open a shell in the php container, as user ${WWW_USER}
   - \e[1mdrush\e[0m     : to call drush in the php container, as user ${WWW_USER}
   - \e[1mphpunit\e[0m   : to call phpunit in the php container, as user ${WWW_USER}
   - \e[1mdrupal\e[0m    : to call the drupal console in the php container, as user ${WWW_USER}
   - \e[1mcomposer\e[0m  : to call composer in the php container, as user ${WWW_USER}
   - \e[1mnode\e[0m      : to create a node.js container and execute a node.js command
   - \e[1mnpm\e[0m       : to create a node.js container and execute a npm command
   - \e[1myarn\e[0m      : to create a node.js container and execute a yarn command
   - \e[1mgulp\e[0m      : to create a node.js container and execute a gulp command

 Additional commands:
   - \e[1mhome\e[0m  : to go inside the project dir

 Notes:
   - php, drush, drupal, and composer are run in the docroot dir
   - node, npm, yarn, and gulp are run in the current dir
################################################################################

"
}

function _create-database ()
{
    cat <<EOF > "$(druckerdir)/docker-runtime/mysql-init/0-create_default_db.sql"
DROP DATABASE IF EXISTS $DB_DRUPAL_DB;
CREATE DATABASE $DB_DRUPAL_DB COLLATE utf8mb4_unicode_ci;
GRANT ALL
  ON $DB_DRUPAL_DB.*
  TO '$DB_DRUPAL_USER'@'%'
  IDENTIFIED BY '$DB_DRUPAL_PASSWORD'
  WITH GRANT OPTION;
FLUSH PRIVILEGES;
EOF
}

# alias for the main entrypoint
alias drucker=drucker

# set aliases to invoke some tools in a container
alias php=php # if scripts require an alias instead
alias drush=drush # drush.complete.sh requires an alias, does not act on functions
alias drupal=drupal # if scripts require an alias
alias composer=composer # if scripts require an alias
alias node=node # if scripts require an alias
alias npm=npm # if scripts require an alias
alias yarn=yarn # if scripts require an alias
alias gulp=gulp # if scripts require an alias

# aliases for convenience
alias home="cd $(projectdir)"

# prepare the directories to set ownership and access rights and to avoid scripts complaining about missing folders
old_umask=$(umask)
# umask 022  # chmod 755
mkdir -p "$(druckerdir)/docker-runtime"
mkdir -p "$(druckerdir)/docker-runtime/console"
mkdir -p "$(druckerdir)/docker-runtime/drush"
mkdir -p "$(druckerdir)/docker-runtime/drush-backups"
mkdir -p "$(druckerdir)/docker-runtime/log"
mkdir -p "$(druckerdir)/docker-runtime/mysql"
mkdir -p "$(druckerdir)/docker-runtime/mysql-init"
mkdir -p "$(druckerdir)/docker-runtime/sql-backups"
mkdir -p "$(projectdir)/www"
mkdir -p "$(projectdir)/www/web" # where to place php code
mkdir -p "$(projectdir)/www/private"
mkdir -p "$(projectdir)/www/private/default"
mkdir -p "$(projectdir)/www/private/default/files" # you can place private files here
mkdir -p "$(projectdir)/www/config"
mkdir -p "$(projectdir)/www/config/sync" # you can place the config files here
mkdir -p "$(projectdir)/www/tmp" # scripts will place temporary files here
chmod 777 "$(projectdir)/www/tmp"
umask "${old_umask}"

_create-database
